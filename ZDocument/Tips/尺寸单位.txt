uni-app尺寸单位

uni-app 使用 upx 作为默认尺寸单位， upx 是相对于基准宽度的单位，可以根据屏幕宽度进行自适应。
uni-app 规定屏幕基准宽度750upx。

举例说明：

若设计稿宽度为 640px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在uni-app里面的宽度应该设为：750 * 100 / 640，结果为：117upx。

若设计稿宽度为 375px，元素 B 在设计稿上的宽度为 200px，那么元素 B 在uni-app里面的宽度应该设为：750 * 200 / 375，结果为：400upx。

动态绑定的 style 不支持直接使用 upx。

<!-- - 静态upx赋值生效 --> 
<view class="test" style="width:200upx"></view> 
<!-- - 动态绑定不生效 --> 
<view class="test" :style="{width:winWidth + 'upx;'}"></view> 

使用uni.upx2px(Number)转换为px后再赋值。

<template>     
<view>         
    <view class="half-width" :style="{width: halfWidth}"> 半屏宽度 </view>     
</view> 
</template>  
<script>     
export default {         
  computed: {             
     halfWidth() {                 
        return uni.upx2px(750 / 2) + 'px';             
     }         
  }
} 
</script> 
<style>
    .half-width {
	    background-color: #FF3333;
    }
</style> 

注意：应尽量避免将样式写在静态样式中

========================================================================

1、px
px其实就是像素的意思，全称pixel，也就是图像的基本采样单位。对于不同的设备，它的图像基本单位是不同的，比如显示器和打印机。而我们通常所说的显示器分辨率是指桌面设定的分辨率，不是显示器的物理分辨率，但是现在我们的桌面分辨率和物理分辨率几乎是一致的，因为这样显示效果最佳。所以总的来说px就是对应我们显示器的分辨率。这样就会有个问题就是如果使用px的话我们就要根据不同电脑的分辨率来做自适应，有点麻烦。

2、em
em是相对长度单位。相对于当前对象内本文的字体尺寸（如果没有设置本文尺寸，那就是相对于浏览器默认的字体尺寸，也就是16px），这样计算的话。如果没有设置字体尺寸就是1em = 16px。如果使用em的话，有个好的建议，就是将body的font-size设置成62.5%，也就是16px * 62.5% = 10px。这样的话1em = 10px，方便我们计算。

3、rem
rem和em一样也是相对长度单位，但是不一样的是rem始终都是相对html根元素。这样有个很大的有点就是使用rem后不会受到对象内文本字体尺寸的影响，而且只需要改变根元素就能改变所有的字体大小。兼容性也是不错的，IE8以上版本和其他浏览器都已经支持，是个做响应式页面的好选择

4、重点：vw和vh
vw和vh是视口（viewport units）单位，何谓视口，就是根据你浏览器窗口的大小的单位，
不受显示器分辨率的影响，我们不需要顾虑到现在那么多不同电脑有关分辨率的自适应问题。

vw是可视窗口的宽度单位，和百分比有点一样，1vw = 可视窗口的宽度的百分之一。
比如窗口宽度大小是1800px，那么1vw = 18px。
和百分比不一样的是，vw始终相对于可视窗口的宽度，而百分比和其父元素的宽度有关。

vh就是可视窗口的高度了。

这边顺便提一下vmin和vmax，vmin是指选择vw和vh中最小的那个，而vmax是选择最大的那个

兼容性方面是vw和vh的短板了，如下图所示，使用vw和vh所需求的版本还是较高的

height: calc(100vh - 70upx); // 100vh 就是全屏了

