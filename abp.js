var abp = abp || {};
(function() {
	//console.log('abp ... ... ...')
	abp.test = function() {
		alert('OKOKOKOKOKOKO');
	}

	/* Application paths *****************************************/

	// Current application root path (including virtual directory if exists).
	abp.appPath = abp.appPath || '/';

	/* AUTHORIZATION **********************************************/
	// Implements Authorization API that simplifies usage of authorization scripts generated by Abp.

	abp.auth = abp.auth || {};

	abp.auth.tokenCookieName = 'Abp.AuthToken';
	abp.auth.tokenHeaderName = 'Authorization';

	abp.auth.setToken = function(authToken, expireDate) {
		abp.utils.setCookieValue(abp.auth.tokenCookieName, authToken, expireDate, abp.appPath);
	};

	abp.auth.getToken = function() {
		return abp.utils.getCookieValue(abp.auth.tokenCookieName);
	}

	abp.auth.clearToken = function() {
		abp.auth.setToken();
	}

	/* UTILS ***************************************************/

	abp.utils = abp.utils || {};
	abp.utils.qjmcNames = [];
	abp.utils.getRolesValue = function(val1, val2) { //1030 全站仪
		//console.log(val2);
		abp.utils.qjmcNames = [];
		var roles = '';
		for (var i = 0; i < val1.length; i++) {
			if (val1[i].toString().startsWith('1')) {
				roles = roles + ',' + val2[i].toString();
				abp.utils.qjmcNames.push([val1[i], val2[i]])
			}
		}
		//console.log(abp.utils.qjmcNames);
		//console.log(roles.substr(1));
		return roles.substr(1);
	}
	abp.utils.getWQ = function(BZ) {
		var wd = "";
		var wd1 = 0;
		var wd2 = 0;
		var qy = 0;
		var sMonth = new Date().getMonth() + 1;
		
		if (sMonth == 12 || sMonth == 1 || sMonth == 2) {
			wd1 = RandomNum(12, 15) / 10;
			qy = RandomNum(1009, 1019);
		} else if (sMonth == 3) {
			wd1 = RandomNum(147, 197) / 10;
			qy = RandomNum(1000, 1013);
		} else if (sMonth >= 4 && sMonth <= 5) {
			wd1 = RandomNum(154, 204) / 10;
			qy = RandomNum(996, 1012);
		} else if (sMonth == 6) {
			wd1 = RandomNum(207, 257) / 10;
			qy = RandomNum(996, 1012);
		} else if (sMonth >= 7 && sMonth <= 8) {
			wd1 = RandomNum(227, 277) / 10;
			qy = RandomNum(996, 1012);
		} else if (sMonth == 9) {
			wd1 = RandomNum(207, 257) / 10;
			qy = RandomNum(996, 1012);
		} else if (sMonth == 10) {
			wd1 = RandomNum(147, 197) / 10;
			qy = RandomNum(1003, 1016);
		} else if (sMonth == 11) {
			wd1 = RandomNum(102, 152) / 10;
			qy = RandomNum(1008, 1018);
		}
		
		wd = wd1;
		
		// 室内外 全站仪
		if (BZ == "0") //InOutRoom
		{
			wd2 = (20 + Math.random() * 5).toFixed(1);
			if (wd2 > wd1)
				wd = wd1 + "～" + wd2;
			else
				wd = wd2 + "～" + wd1;
		}
		// 室内 水准仪
		if (BZ == "1") //InRoom
		{
			wd = wd1;
		}
		// 室外 GPS
		if (BZ == "2") //OutRoom
		{			
			wd2 = (wd1 + Math.random() * 5).toFixed(1);
			wd = wd1 + "～" + wd2;
		}
		return [wd, qy];
	}
	//随机5位数
	function RndNum(n) {
		var rnd = "";
		for (var i = 0; i < n; i++)
			rnd += Math.floor(Math.random() * 10); //  返回小于或等于一个给定数字的最大整数 - 向下取整
		return rnd;
	}
	//随机数
	function RandomNum(Min, Max) {
		var Range = Max - Min;
		var Rand = Math.random();
		var num = Min + Math.round(Rand * Range); //四舍五入
		return num;
	}
	/**
	 * Sets a cookie value for given key.
	 * This is a simple implementation created to be used by ABP.
	 * Please use a complete cookie library if you need.
	 * @param {string} key
	 * @param {string} value
	 * @param {Date} expireDate (optional). If not specified the cookie will expire at the end of session.
	 * @param {string} path (optional)
	 */
	abp.utils.setCookieValue = function(key, value, expireDate, path) {
		var cookieValue = encodeURIComponent(key) + '=';

		if (value) {
			cookieValue = cookieValue + encodeURIComponent(value);
		}

		if (expireDate) {
			cookieValue = cookieValue + "; expires=" + expireDate.toUTCString();
		}

		if (path) {
			cookieValue = cookieValue + "; path=" + path;
		}

		//document.cookie = cookieValue;
		plus.navigator.setCookie(key, cookieValue);
	};

	/**
	 * Gets a cookie with given key.
	 * This is a simple implementation created to be used by ABP.
	 * Please use a complete cookie library if you need.
	 * @param {string} key
	 * @returns {string} Cookie value or null
	 */
	abp.utils.getCookieValue = function(key) {

		return plus.navigator.getCookie(key);
		/*
		var equalities = document.cookie.split('; ');
        for (var i = 0; i < equalities.length; i++) {
            if (!equalities[i]) {
                continue;
            }

            var splitted = equalities[i].split('=');
            if (splitted.length != 2) {
                continue;
            }

            if (decodeURIComponent(splitted[0]) === key) {
                return decodeURIComponent(splitted[1] || '');
            }
        }
        return null;
		*/
	};

	/**
	 * Deletes cookie for given key.
	 * This is a simple implementation created to be used by ABP.
	 * Please use a complete cookie library if you need.
	 * @param {string} key
	 * @param {string} path (optional)
	 */
	abp.utils.deleteCookie = function(key, path) {

		//plus.navigator.removeAllCookie();

		var cookieValue = encodeURIComponent(key) + '=';

		cookieValue = cookieValue + "; expires=" + (new Date(new Date().getTime() - 86400000)).toUTCString();

		if (path) {
			cookieValue = cookieValue + "; path=" + path;
		}

		//document.cookie = cookieValue;
		plus.navigator.setCookie(key, cookieValue);
	}

	/* SECURITY ***************************************/
	abp.security = abp.security || {};
	abp.security.antiForgery = abp.security.antiForgery || {};

	abp.security.antiForgery.tokenCookieName = 'XSRF-TOKEN';
	abp.security.antiForgery.tokenHeaderName = 'X-XSRF-TOKEN';

	abp.security.antiForgery.getToken = function() {
		return abp.utils.getCookieValue(abp.security.antiForgery.tokenCookieName);
	};

})(); // !!!不要写成 })(abp);
export default abp;
